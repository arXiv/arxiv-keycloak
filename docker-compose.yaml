
services:
  auth-db:
    image: postgres:16
    container_name: keycloak_postgres
    environment:
      POSTGRES_USER: ${KC_DB_USER}
      POSTGRES_PASSWORD: ${KC_DB_PASS}
      POSTGRES_DB: keycloak
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - ${DOCKER_NETWORK}

  pubsub-emulator:
    image: google/cloud-sdk:latest
    container_name: pubsub-emulator
    command: "/pubsub-setup.sh ${PUBSUB_EMULATOR_PORT} ${GCP_PROJECT} ${GCP_EVENT_TOPIC_ID} ${KC_TAPIR_BRIDGE_SUBSCRIPTION}"
    ports:
      - "${PUBSUB_EMULATOR_PORT}:${PUBSUB_EMULATOR_PORT}"
    environment:
      PUBSUB_EMULATOR_HOST: "0.0.0.0:${PUBSUB_EMULATOR_PORT}"
    networks:
      - ${DOCKER_NETWORK}
    volumes:
      - ./tests/config/pubsub-setup.sh:/pubsub-setup.sh:ro

  keycloak:
    image: ${KC_DOCKER_TAG}:latest
    container_name: keycloak
    environment:
      DB_ADDR: auth-db
      DB_DATABASE: keycloak
      DB_VENDOR: postgres
      KC_DB_PASS: ${KC_DB_PASS}
      KC_DB_USER: ${KC_DB_USER}
      GCP_CREDENTIALS: ${GCP_CRED}
      GCP_PROJECT_ID: ${GCP_PROJECT}
      KC_JDBC_CONNECTION: ${KC_JDBC_CONNECTION}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      LOG_LEVEL: "INFO,freemarker:DEBUG"
      LOG_OUTPUT_FORMAT: "--log-console-output=default"
      PUBSUB_EMULATOR_HOST: pubsub-emulator:${PUBSUB_EMULATOR_PORT}
      KC_HTTP_PORT: ${KC_PORT}
    command:
      - start-dev --verbose --http-port ${KC_PORT}
    # This is needed when you connect to DB on GCP
    # volumes:
    #   - ${PWD}/keycloak_bend/cert:/secrets/authdb-certs:ro

    ports:
      - "${KC_PORT}:${KC_PORT}"
    depends_on:
      - auth-db
      - pubsub-emulator
      - legacy-auth-provider
    networks:
      - ${DOCKER_NETWORK}

  arxiv-db:
    image: mysql:5.7.20
    container_name: arxiv-test-db
    ports:
      - "${ARXIV_DB_PORT}:${ARXIV_DB_PORT}"  # Host port:Container port
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: arXiv
      MYSQL_USER: arxiv
      MYSQL_PASSWORD: arxiv_password
      MYSQL_TCP_PORT: ${ARXIV_DB_PORT}
    # volumes:
    #  - mysql_data:/var/lib/mysql  # Persist data locally (optional)
    networks:
      - ${DOCKER_NETWORK}

  oauth2-authenticator:
    image: ${ARXIV_OAUTH2_CLIENT_TAG}
    container_name: oauth2-authenticator
    environment:
      PORT: ${ARXIV_OAUTH2_APP_PORT}
      KEYCLOAK_SERVER_URL: http://keycloak:${KC_PORT}/
      OAUTH2_CALLBACK_URL: ${AAA_CALLBACK_URL}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      CLASSIC_DB_URI: ${CLASSIC_DB_URI}
      SESSION_DURATION: 36000
      CLASSIC_COOKIE_NAME: tapir_session
      CLASSIC_SESSION_HASH: ${CLASSIC_SESSION_HASH}
      JWT_SECRET: ${JWT_SECRET}
      # Do not set DOMAIN - this is to designate the cookie domain and for
      # local run, having this is harmful.
      # In production, this is probably set to .arxiv.org
      # DOMAIN: localhost
    ports:
      - "${ARXIV_OAUTH2_APP_PORT}:${ARXIV_OAUTH2_APP_PORT}"  # Host port:Container port

    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      - arxiv-db
      - keycloak
      - keycloak-setup

  legacy-auth-provider:
    image: ${LEGACY_AUTH_DOCKER_TAG}
    container_name: legacy-auth-provider
    ports:
      - "${LEGACY_AUTH_PORT}:${LEGACY_AUTH_PORT}"  # Host port:Container port
    networks:
      - ${DOCKER_NETWORK}
    environment:
      API_SECRET_KEY: "${LEGACY_AUTH_API_TOKEN}"
      PORT: ${LEGACY_AUTH_PORT}
      # CLASSIC_DB_URI: "mysql://arxiv:arxiv_password@arxiv-test-db:3306/arXiv"
      CLASSIC_DB_URI: ${CLASSIC_DB_URI}
      URI: "http://legacy-auth-provider:${LEGACY_AUTH_PORT}/auth"
    depends_on:
      - arxiv-db

  keycloak-tapir-bridge:
    image: "${KC_TAPIR_BRIDGE_DOCKER_TAG}"
    container_name: kc-tapir-bridge
    environment:
      PUBSUB_EMULATOR_HOST: pubsub-emulator:${PUBSUB_EMULATOR_PORT}
      # IRL, you set this so the app can read the events from pubsub
      # GOOGLE_APPLICATION_CREDENTIALS: sync-test.json
      SUBSCRIPTION: ${KC_TAPIR_BRIDGE_SUBSCRIPTION}
      # CLASSIC_DB_URI: "mysql://arxiv:arxiv_password@arxiv-test-db:3306/arXiv"
      CLASSIC_DB_URI: ${CLASSIC_DB_URI}
    networks:
      - ${DOCKER_NETWORK}
    depends_on:
      - arxiv-db
      - pubsub-emulator
    command: python main.py --project "${GCP_PROJECT}" --subscription "${KC_TAPIR_BRIDGE_SUBSCRIPTION}" --debug 


  testsite:
    image: ${TESTSITE_TAG}:latest
    container_name: testsite
    ports:
      - "${TESTSITE_PORT}:${TESTSITE_PORT}"  # Host port:Container port
    environment:
      PORT: ${TESTSITE_PORT}
      JWT_SECRET: ${JWT_SECRET}
      KC_URL_PUBLIC: ${KC_URL_PUBLIC}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      NGINX_PORT: ${NGINX_PORT} 
    networks:
      - ${DOCKER_NETWORK}


  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    volumes:
      - ./tests/config/nginx-docker.conf:/etc/nginx/nginx.conf:ro  # Mount custom NGINX config
      - ./tests/nginx/:/nginx/:ro
      - ./tests/log.d/:/log.d/
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    depends_on:
      - oauth2-authenticator
      - testsite
    networks:
      - ${DOCKER_NETWORK}
    
  keycloak-setup:
    image: python:3.11
    container_name: keycloak-setup
    depends_on:
      - keycloak
    networks:
      - ${DOCKER_NETWORK}
    volumes:
      - ./keycloak_bend:/keycloak_bend:ro
    environment:
      # This is running in the docker network - so use private address
      KC_URL: "${KC_URL_PRIVATE}"
      KC_ADMIN_PASSWORD: "${KC_ADMIN_PASSWORD}"
      ARXIV_USER_SECRET: "${KEYCLOAK_CLIENT_SECRET}"
      LEGACY_AUTH_API_TOKEN: "${LEGACY_AUTH_API_TOKEN}"

    entrypoint: sh /keycloak_bend/tools/setup-arxiv-realm.sh

  arxiv-db-setup:
    image: python:3.11
    container_name: arxiv-db-setup
    depends_on:
      - arxiv-db
    networks:
      - ${DOCKER_NETWORK}
    environment:
      ARXIV_DB_HOST: arxiv-db
      ARXIV_DB_PORT: ${ARXIV_DB_PORT}
    volumes:
      - ./:/arxiv-keycloak/:ro
    entrypoint: bash /arxiv-keycloak/tools/load_test_data.sh
    
# volumes:
#   postgres_data:

networks:
  arxiv-network:
    driver: bridge
  host:

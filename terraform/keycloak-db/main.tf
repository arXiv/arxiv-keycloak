terraform {
  required_version = "~> 1.13"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 7.2"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.6"
    }
  }
  backend "gcs" {
    prefix = "keycloak-auth-db"
  }
}

provider "google" {
  project = var.gcp_project_id # default inherited by all resources
  region  = var.gcp_region     # default inherited by all resources
}

# Generate random password for admin user if not provided
resource "random_password" "db_password" {
  count   = var.db_password == "" ? 1 : 0
  length  = 32
  special = true
}

# Secret Manager secret for database admin password
resource "google_secret_manager_secret" "db_password" {
  secret_id = "${var.instance_name}-db-password"
  project   = var.gcp_project_id

  replication {
    auto {}
  }

  labels = {
    database = var.instance_name
    purpose  = "db-admin-password"
  }
}

resource "google_secret_manager_secret_version" "db_password" {
  secret      = google_secret_manager_secret.db_password.id
  secret_data = var.db_password != "" ? var.db_password : random_password.db_password[0].result
}

# Postgresql Auth DB

resource "google_sql_database_instance" "auth_db" {
  name             = var.instance_name
  database_version = "POSTGRES_17"
  region           = var.gcp_region

  settings {
    tier = var.tier

    disk_size = var.disk_size
    disk_type = "PD_SSD"

    backup_configuration {
      enabled                        = true
      point_in_time_recovery_enabled = true
      start_time                     = "02:00"
      location                       = var.gcp_region
    }

    ip_configuration {
      ipv4_enabled    = var.ipv4_enabled
      private_network = var.private_network
      require_ssl     = var.require_ssl
      # No authorized_networks - use Cloud SQL Proxy for secure access
    }

    database_flags {
      name  = "log_statement"
      value = "all"
    }
  }

  deletion_protection = var.deletion_protection
}

resource "google_sql_database" "auth_database" {
  name     = var.database_name
  instance = google_sql_database_instance.auth_db.name
}

resource "google_sql_user" "auth_user" {
  name     = var.db_username
  instance = google_sql_database_instance.auth_db.name
  password = google_secret_manager_secret_version.db_password.secret_data
}

resource "google_sql_user" "keycloak_user" {
  name     = "keycloak"
  instance = google_sql_database_instance.auth_db.name
  password = var.keycloak_password
}

# Generate shell script that outputs SSL certificates for keycloak-service
locals {
  # Shell script that extracts database SSL certificates
  # This is mounted by keycloak-service and executed at startup
  db_certs_script = <<-EOF
    #!/bin/bash
    # Auto-generated by Terraform (keycloak-db module)
    # This script outputs Cloud SQL SSL certificates for keycloak-service

    cat > server-ca.pem <<'CERT'
    ${google_sql_database_instance.auth_db.server_ca_cert[0].cert}
    CERT

    chmod 644 server-ca.pem
    echo "Database SSL certificates extracted to $(pwd)"
  EOF
}

# Secret Manager secret for database SSL certificates
resource "google_secret_manager_secret" "authdb_certs" {
  secret_id = "authdb-certs"
  project   = var.gcp_project_id

  replication {
    auto {}
  }

  labels = {
    database = var.instance_name
    purpose  = "ssl-certificates"
  }
}

resource "google_secret_manager_secret_version" "authdb_certs" {
  secret      = google_secret_manager_secret.authdb_certs.id
  secret_data = local.db_certs_script
}
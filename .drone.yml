kind: pipeline
type: kubernetes
name: build-docker-images

node:
  environment: gcp

environment:
  ARTIFACT_REPO: arxiv-keycloak

services:
- name: docker
  image: docker:dind
  privileged: true
  volumes:
  - name: docker-socket
    path: /var/run
  - name: docker-cache
    path: /var/lib/docker


steps:

  - name: hello
    image: alpine/git
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
    commands:
      - set
      - echo FOO=bar >> envvars
      - ls
      # Improved git fetch and diff logic that works for both direct pushes and PRs
      - git fetch --all || echo "Failed to fetch all branches"
      - |
        # Check for forced rebuild in commit message
        if echo "$DRONE_COMMIT_MESSAGE" | grep -q "\\[rebuild-all\\]"; then
          echo "Forced rebuild requested via commit message"
          touch .run-keycloak_bend
          touch .run-account-ui
          touch .run-keycloak_tapir_bridge
          touch .run-oauth2-authenticator
          touch .run-user-portal
          touch .run-test-mta
          touch .run-legacy_auth_provider
          exit 0
        fi
        
        # Check for last successful build tag for this branch
        LAST_SUCCESS_TAG="last-successful-build-${DRONE_BRANCH}"
        git fetch origin "refs/tags/${LAST_SUCCESS_TAG}:refs/tags/${LAST_SUCCESS_TAG}" || echo "No previous successful build tag found"
        
        if git rev-parse --verify "refs/tags/${LAST_SUCCESS_TAG}" >/dev/null 2>&1; then
          LAST_SUCCESS_SHA=$(git rev-parse "refs/tags/${LAST_SUCCESS_TAG}")
          echo "Found last successful build: $LAST_SUCCESS_SHA"
        else
          echo "No previous successful build found for branch ${DRONE_BRANCH}, building all components"
          touch .run-keycloak_bend
          touch .run-account-ui
          touch .run-keycloak_tapir_bridge
          touch .run-oauth2-authenticator
          touch .run-user-portal
          touch .run-test-mta
          touch .run-legacy_auth_provider
          exit 0
        fi
      # Try to fetch the before commit, but don't fail if it doesn't exist
      - git fetch origin $DRONE_COMMIT_BEFORE || echo "Could not fetch $DRONE_COMMIT_BEFORE directly"
      # For PRs, ensure we have both source and target branches
      - |
        if [ ! -z "$DRONE_SOURCE_BRANCH" ] && [ ! -z "$DRONE_TARGET_BRANCH" ]; then
          echo "This is a PR from $DRONE_SOURCE_BRANCH to $DRONE_TARGET_BRANCH"
          git fetch origin $DRONE_SOURCE_BRANCH || echo "Could not fetch source branch"
          git fetch origin $DRONE_TARGET_BRANCH || echo "Could not fetch target branch"
        fi
      # Compare against last successful build
      - |
        echo "Comparing last successful build $LAST_SUCCESS_SHA â†’ $DRONE_COMMIT_SHA"
        git diff --name-only $LAST_SUCCESS_SHA $DRONE_COMMIT_SHA > changed_files.txt
      - cat changed_files.txt
      - grep -q '^keycloak_bend/' changed_files.txt && touch .run-keycloak_bend || echo "No changes in keycloak_bend"
      - grep -q '^account-ui/' changed_files.txt && touch .run-account-ui || echo "No changes in account-ui"
      - grep -q '^keycloak_tapir_bridge/' changed_files.txt && touch .run-keycloak_tapir_bridge || echo "No changes in keycloak_tapir_bridge"
      - grep -q '^oauth2-authenticator/' changed_files.txt && touch .run-oauth2-authenticator || echo "No changes in oauth2-authenticator"
      - grep -q '^user-portal/' changed_files.txt && touch .run-user-portal || echo "No changes in user-portal"
      - grep -q '^test-mta/' changed_files.txt && touch .run-test-mta || echo "No changes in test-mta"
      - grep -q '^legacy_auth_provider/' changed_files.txt && touch .run-legacy_auth_provider || echo "No changes in legacy_auth_provider"
    volumes:
      - name: docker-socket
        path: /var/run

  # Step: keycloak_bend
  - name: build-keycloak-bend
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:1575e2fe2c54556229df469ed4cc237bc9ce130f
    privileged: true
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - python3 /arxiv/setup_sa.py
      -  if [ -f .run-keycloak_bend ]; then . ./envvars && python3 /arxiv/docker_builder.py arxiv-keycloak keycloak_bend/ --repo $DRONE_REPO_NAME --gitsha $GIT_SHA -f keycloak_bend/Dockerfile; fi
    depends_on:
      - hello

  # Step: account-ui
  - name: build-account-ui
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:1575e2fe2c54556229df469ed4cc237bc9ce130f
    privileged: true
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - python3 /arxiv/setup_sa.py
      - if [ -f .run-account-ui ]; then . ./envvars && python3 /arxiv/docker_builder.py account-ui account-ui/account-app/ --repo $DRONE_REPO_NAME --gitsha $GIT_SHA -f account-ui/account-app/Dockerfile ; fi
    depends_on:
      - hello
      
  # Step: keycloak_tapir_bridge
  - name: build-keycloak-tapir-bridge
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:1575e2fe2c54556229df469ed4cc237bc9ce130f
    privileged: true
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - python3 /arxiv/setup_sa.py
      - if [ -f .run-keycloak_tapir_bridge ]; then . ./envvars && python3 /arxiv/docker_builder.py keycloak-tapir-bridge keycloak_tapir_bridge/ --repo $DRONE_REPO_NAME --gitsha $GIT_SHA -f keycloak_tapir_bridge/Dockerfile; fi
    depends_on:
      - hello

  # Step: oauth2-authenticator
  - name: build-oauth2-authenticator
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:1575e2fe2c54556229df469ed4cc237bc9ce130f
    privileged: true
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - python3 /arxiv/setup_sa.py
      - if [ -f .run-oauth2-authenticator ]; then . ./envvars && python3 /arxiv/docker_builder.py oauth2-authenticator oauth2-authenticator/ --repo $DRONE_REPO_NAME --gitsha $GIT_SHA -f oauth2-authenticator/Dockerfile ; fi
    depends_on:
      - hello

  # Step: test-mta
  - name: build-test-mta
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:1575e2fe2c54556229df469ed4cc237bc9ce130f
    privileged: true
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - python3 /arxiv/setup_sa.py
      - if [ -f .run-test-mta ]; then . ./envvars && python3 /arxiv/docker_builder.py test-mta test-mta/ --repo $DRONE_REPO_NAME --gitsha $GIT_SHA -f test-mta/Dockerfile ; fi
      - if [ -f .run-test-mta ]; then . ./envvars && python3 /arxiv/docker_builder.py email-to-pubsub test-mta/ --repo $DRONE_REPO_NAME --gitsha $GIT_SHA -f test-mta/email-to-pubsub.Dockerfile ; fi
    depends_on:
      - hello

  # Step: legacy_auth_provider
  - name: build-legacy-auth-provider
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:1575e2fe2c54556229df469ed4cc237bc9ce130f
    privileged: true
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - python3 /arxiv/setup_sa.py
      - if [ -f .run-legacy_auth_provider ]; then . ./envvars && python3 /arxiv/docker_builder.py legacy-auth-provider legacy_auth_provider/ --repo $DRONE_REPO_NAME --gitsha $GIT_SHA -f legacy_auth_provider/Dockerfile ; fi
    depends_on:
      - hello

  # Step: user-portal
  - name: build-user-portal
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:1575e2fe2c54556229df469ed4cc237bc9ce130f
    privileged: true
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
    volumes:
      - name: docker-socket
        path: /var/run
    commands:
      - python3 /arxiv/setup_sa.py
      - if [ -f .run-user-portal ]; then . ./envvars && python3 /arxiv/docker_builder.py user-portal user-portal/ --repo $DRONE_REPO_NAME --gitsha $GIT_SHA -f user-portal/Dockerfile ; fi
    depends_on:
      - hello


  - name: failure
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:e7a4be9
    privileged: true
    environment:
      SLACK_WEBHOOK_URL:
        from_secret: slack_webhook
    commands:
      # - python3 /arxiv/slacker.py
      - echo bummer
    when:
      status:
        - failure
    depends_on:
      - build-keycloak-bend
      - build-account-ui
      - build-keycloak-tapir-bridge
      - build-oauth2-authenticator
      - build-test-mta
      - build-user-portal
      - build-legacy-auth-provider

  - name: success
    image: gcr.io/arxiv-stage/arxiv-devops/arxiv-builder:e7a4be9
    privileged: true
    environment:
      GIT_SHA: ${DRONE_COMMIT_SHA}
      PLUGIN_JSON_KEY:
        from_secret: drone_runner_sa_key
      GITHUB_TOKEN:
        from_secret: github_token
    settings:
      slack_webhook_url:
        from_secret: slack_webhook
    commands:
      - echo SUCCESS
      - |
        # Store successful build SHA for future reference
        echo "Build succeeded for commit: $DRONE_COMMIT_SHA on branch: $DRONE_BRANCH"
        echo "TODO: Implement persistent storage of successful build SHA"
    depends_on:
      - build-keycloak-bend
      - build-account-ui
      - build-keycloak-tapir-bridge
      - build-oauth2-authenticator
      - build-test-mta
      - build-user-portal
      - build-legacy-auth-provider

    when:
      status:
        - success

volumes:
  - name: docker-cache
    persistentVolumeClaim:
      claimName: docker-cache-pvc
  - name: docker-socket
    host:
      path: /var/run

trigger:
  branch:
    - master
  event:
    - push
---
# Pipeline for CentOS 9
kind: pipeline
type: exec
name: centos-9-deploy

node:
  environment: centos9
depends_on:
  - build-docker-images

platform:
  os: linux
  arch: amd64

steps:
  - name: refresh dockers
    commands:
      - whoami
      - export HOME=/home/drone
      - export GOOGLE_APPLICATION_CREDENTIALS=/opt_arxiv/bomb-range/cred/drone-runner-sa.json
      - gcloud auth activate-service-account --key-file=/opt_arxiv/bomb-range/cred/drone-runner-sa.json
      - gcloud auth configure-docker gcr.io
      - cd /opt_arxiv/bomb-range
      - make down
      - make up

trigger:
  branch:
    - master
  event:
    - push

---
# Pipeline for web40
kind: pipeline
type: exec
name: web40-deploy

node:
  environment: web40
depends_on:
  - build-docker-images

platform:
  os: linux
  arch: amd64

steps:
  - name: refresh dockers
    commands:
      - whoami
      - export HOME=/users/jenkins
      - export GOOGLE_APPLICATION_CREDENTIALS=/opt_arxiv/bomb-range/cred/drone-runner-sa.json
      - gcloud auth activate-service-account --key-file=/opt_arxiv/bomb-range/cred/drone-runner-sa.json
      - gcloud auth configure-docker gcr.io
      - cd /opt_arxiv/bomb-range
      - make down
      - make up

trigger:
  branch:
    - master
  event:
    - push

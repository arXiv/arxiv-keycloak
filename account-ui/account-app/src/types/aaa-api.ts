/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Login
         * @description User can log in with username and password, or permanent token.
         */
        get: operations["login_login_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Oauth2 Callback
         * @description User can log in with username and password, or permanent token.
         */
        get: operations["oauth2_callback_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/impersonate/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Impersonate
         * @description Handles user impersonation by administrators to access and act on behalf of another user.
         *     This involves retrieving user information from the database and Keycloak,
         *     generating appropriate claims, managing cookies, and performing necessary Keycloak
         *     impersonation API calls.
         *
         *     :param request: The incoming HTTP request.
         *     :type request: Request
         *     :param user_id: The user ID of the target user to impersonate.
         *     :type user_id: str
         *     :param session: Database session dependency used for fetching user data.
         *     :type session: sqlalchemy.orm.Session
         *     :param remote_ip: Client IP address retrieved from the request.
         *     :type remote_ip: str
         *     :param remote_ip: Client Hostname retrieved from the request.
         *     :type remote_hostname: str
         *     :param tracking_cookie: Tapir tracking cookie, if any.
         *     :type tracking_cookie: str
         *     :param current_user: Current authenticated user making the impersonation request. This
         *         parameter can be None, indicating that the user is not authenticated.
         *     :type current_user: Optional[ArxivUserClaims]
         *     :return: A Response object which includes cookies for the impersonated session and redirects
         *         to a target URL if impersonation was successful.
         *     :rtype: Response
         */
        post: operations["impersonate_impersonate__user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Refresh Token
         * @description Refresh the access token
         *
         *     current_user: Optional[ArxivUserClaims] = Depends(get_current_user_or_none)
         *     is the standard method of getting the cookie/user but since this is a refresh request, it is likely
         *     the user claims expired, and thus no "current user".
         *
         *     IOW, this needs to get to the refresh token, turn it into access token and recreate the cookie if
         *     it succeeds.
         *
         *     The code here mirrors to get_current_user_or_none, so maybe I should refactor to do the first part of
         *     checking the cookies and rehydrate it.
         */
        get: operations["refresh_token_refresh_get"];
        put?: never;
        /** Refresh Tokens */
        post: operations["refresh_tokens_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Logout
         * @description Log out of arXiv.
         */
        get: operations["logout_logout_get"];
        put?: never;
        /**
         * Logout
         * @description Log out of arXiv.
         */
        post: operations["logout_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout-callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout Callback */
        post: operations["logout_callback_logout_callback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Token Names */
        get: operations["get_token_names_token_names_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/well-known": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Well Known Services */
        get: operations["get_well_known_services_well_known_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/check-db": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check Db */
        get: operations["check_db_check_db_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Hit the db and get user info
         */
        get: operations["get_current_user_info_account_current_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Profile */
        get: operations["get_user_profile_account__user_id__profile_get"];
        /**
         * Update Account Profile
         * @description Update the user account profile for both Keycloak and user in db
         */
        put: operations["update_account_profile_account__user_id__profile_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update User Name
         * @description Update the user account profile for both Keycloak and user in db
         */
        put: operations["update_user_name_account__user_id__name_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/register/preflight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Preflight Register Account */
        post: operations["preflight_register_account_account_register_preflight_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Register */
        get: operations["get_register_account_register_get"];
        put?: never;
        /**
         * Register Account
         * @description Create a new user
         */
        post: operations["register_account_account_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/email/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Email Verify
         * @description Request to send verify email
         */
        post: operations["request_email_verify_account__user_id__email_verify_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/email/verified": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Email Verified Status Current User
         * @description Is the email verified for this user?
         */
        get: operations["get_email_verified_status_current_user_account_email_verified_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/email/verified": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Email Verified Status
         * @description Is the email verified for this user?
         */
        get: operations["get_email_verified_status_account__user_id__email_verified_get"];
        /**
         * Set Email Verified Status
         * @description Set the email verified status
         */
        put: operations["set_email_verified_status_account__user_id__email_verified_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change Email
         * @description Request to change email
         */
        put: operations["change_email_account__user_id__email_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/email/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Email History
         * @description Get the past email history
         */
        get: operations["get_email_history_account__user_id__email_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change User Password
         * @description Update user password
         */
        put: operations["change_user_password_account__user_id__password_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/password/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset User Password
         * @description Reset user password
         */
        post: operations["reset_user_password_account_password_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/identifier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Profile With Query */
        get: operations["get_user_profile_with_query_account_identifier_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/orcid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upsert Orcid
         * @description Update ORCID
         */
        put: operations["upsert_orcid_account_orcid_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/author_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upsert Author Id
         * @description Update AUTHOR_ID
         */
        put: operations["upsert_author_id_account_author_id_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update User Authorization
         * @description Update User authorization
         */
        put: operations["update_user_authorization_account__user_id__authorization_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/password/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Password Hash
         * @description check the password hash
         */
        post: operations["validate_password_hash_account_password_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/captcha/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Captcha Image */
        get: operations["get_captcha_image_captcha_image_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/captcha/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Captcha Token */
        get: operations["get_captcha_token_captcha_token_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/captcha/audio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Captcha Audio */
        get: operations["get_captcha_audio_captcha_audio_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/keycloak/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Audit Event
         * @description Receives Keycloak audit events and updates the state.
         */
        post: operations["audit_event_keycloak_audit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/keycloak/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Kc User
         * @description Get the user's data from Keycloak
         */
        get: operations["get_kc_user_keycloak_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AccountIdentifierModel
         * @description Mapping ot the identifiers that can point to a user
         */
        AccountIdentifierModel: {
            /** User Id */
            user_id: string | null;
            /** Email */
            email: string | null;
            /** Username */
            username: string | null;
            /** Orcid */
            orcid?: string | null;
            /** Author Id */
            author_id?: string | null;
        };
        /** AccountInfoModel */
        AccountInfoModel: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Suffix Name */
            suffix_name?: string | null;
            /** Username */
            username?: string | null;
            /** Email */
            email?: string | null;
            /** Country */
            country?: string | null;
            /** Affiliation */
            affiliation?: string | null;
            default_category?: components["schemas"]["CategoryIdModel"] | null;
            /** Groups */
            groups?: components["schemas"]["CategoryGroup"][] | null;
            /** Url */
            url?: string | null;
            /** Joined Date */
            joined_date?: number | null;
            /** Oidc Id */
            oidc_id?: string | null;
            career_status?: components["schemas"]["CAREER_STATUS"] | null;
            /** Tracking Cookie */
            tracking_cookie?: string | null;
            veto_status?: components["schemas"]["VetoStatusEnum"] | null;
            /** Id */
            id: string;
            /** Email Verified */
            email_verified?: boolean | null;
            /** Scopes */
            scopes?: string[] | null;
            /** Author Id */
            author_id?: string | null;
            /** Orcid Id */
            orcid_id?: string | null;
            /** Orcid Authenticated */
            orcid_authenticated?: boolean | null;
        };
        /** AccountRegistrationError */
        AccountRegistrationError: {
            /** Message */
            message: string;
            /** Field Name */
            field_name?: string | null;
        };
        /** AccountRegistrationModel */
        AccountRegistrationModel: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Suffix Name */
            suffix_name?: string | null;
            /** Username */
            username?: string | null;
            /** Email */
            email?: string | null;
            /** Country */
            country?: string | null;
            /** Affiliation */
            affiliation?: string | null;
            default_category?: components["schemas"]["CategoryIdModel"] | null;
            /** Groups */
            groups?: components["schemas"]["CategoryGroup"][] | null;
            /** Url */
            url?: string | null;
            /** Joined Date */
            joined_date?: number | null;
            /** Oidc Id */
            oidc_id?: string | null;
            career_status?: components["schemas"]["CAREER_STATUS"] | null;
            /** Tracking Cookie */
            tracking_cookie?: string | null;
            veto_status?: components["schemas"]["VetoStatusEnum"] | null;
            /** Password */
            password: string;
            /** Origin Ip */
            origin_ip?: string | null;
            /** Origin Host */
            origin_host?: string | null;
            /** Token */
            token: string;
            /** Captcha Value */
            captcha_value: string;
            /**
             * Keycloak Migration
             * @default false
             */
            keycloak_migration: boolean;
        };
        /** AccountUserNameUpdateModel */
        AccountUserNameUpdateModel: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Suffix Name */
            suffix_name?: string | null;
            /** Username */
            username?: string | null;
            /** Comment */
            comment?: string | null;
        };
        /** AuthorIdUpdateModel */
        AuthorIdUpdateModel: {
            /** User Id */
            user_id: string;
            /** Author Id */
            author_id?: string | null;
        };
        /**
         * CAREER_STATUS
         * @enum {string}
         */
        CAREER_STATUS: "Unknown" | "Staff" | "Professor" | "Post Doc" | "Grad Student" | "Other";
        /** CaptchaTokenReplyModel */
        CaptchaTokenReplyModel: {
            /** Token */
            token: string;
        };
        /**
         * CategoryGroup
         * @enum {string}
         */
        CategoryGroup: "grp_physics" | "grp_math" | "grp_cs" | "grp_q-bio" | "grp_q-fin" | "grp_q-stat" | "grp_q-econ" | "grp_eess" | "grp_nlin" | "grp_test";
        /** CategoryIdModel */
        CategoryIdModel: {
            /** Archive */
            archive: string;
            /** Subject Class */
            subject_class: string;
        };
        /** EmailChangeEntry */
        EmailChangeEntry: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Email */
            email: string;
            /**
             * Start Date
             * Format: date-time
             */
            start_date: string;
            /** End Date */
            end_date: string | null;
            changed_by: components["schemas"]["EmailChangedBy"];
            /** Admin Id */
            admin_id?: number | null;
            /**
             * Issued When
             * Format: date-time
             */
            issued_when: string;
            /** Used */
            used: boolean;
        };
        /**
         * EmailChangedBy
         * @enum {string}
         */
        EmailChangedBy: "USER" | "ADMIN";
        /** EmailModel */
        EmailModel: {
            /** Email */
            email: string;
        };
        /** EmailUpdateModel */
        EmailUpdateModel: {
            /** Email */
            email: string;
            /** New Email */
            new_email: string;
            /** Email Verified */
            email_verified?: boolean | null;
            /** Comment */
            comment?: string | null;
        };
        /** EmailVerifiedStatus */
        EmailVerifiedStatus: {
            /** Email Verified */
            email_verified: boolean;
            /** User Id */
            user_id?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** OrcidUpdateModel */
        OrcidUpdateModel: {
            /** User Id */
            user_id: string;
            /** Orcid */
            orcid?: string | null;
            /** Orcid Auth */
            orcid_auth?: string | null;
            /** Authenticated */
            authenticated: boolean;
        };
        /** PasswordInput */
        PasswordInput: {
            /** Password Sha1 */
            password_sha1: string;
            /** Length */
            length: number;
        };
        /** PasswordResetRequest */
        PasswordResetRequest: {
            /** Username Or Email */
            username_or_email: string;
        };
        /** PasswordUpdateModel */
        PasswordUpdateModel: {
            /** Old Password */
            old_password: string;
            /** New Password */
            new_password: string;
        };
        /** PasswordValidationResult */
        PasswordValidationResult: {
            /** Valid */
            valid: boolean;
            /** Reason */
            reason?: string | null;
        };
        /**
         * RefreshedTokens
         * @description Token refresh reply
         */
        RefreshedTokens: {
            /** Session */
            session: string;
            /** Classic */
            classic: string | null;
            /** Domain */
            domain: string | null;
            /** Max Age */
            max_age: number;
            /** Secure */
            secure: boolean;
            /** Samesite */
            samesite: string;
        };
        /**
         * Tokens
         * @description Token refresh request body
         */
        Tokens: {
            /** Classic */
            classic: string | null;
            /** Session */
            session: string;
            /** Refresh */
            refresh: string;
        };
        /** UserAuthorizationModel */
        UserAuthorizationModel: {
            /** Deleted */
            deleted?: boolean | null;
            /** Administrator */
            administrator?: boolean | null;
            /** Approved */
            approved?: boolean | null;
            /** Suspend */
            suspend?: boolean | null;
            /** Can Lock */
            can_lock?: boolean | null;
            /** Moderator */
            moderator?: boolean | null;
            /** Owner */
            owner?: boolean | null;
            /** Comment */
            comment?: string | null;
        };
        /** UserModel */
        UserModel: {
            /** Id */
            id?: number | null;
            /** Email */
            email: string;
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Suffix Name */
            suffix_name?: string | null;
            /**
             * Share First Name
             * @default true
             */
            share_first_name: boolean;
            /**
             * Share Last Name
             * @default true
             */
            share_last_name: boolean;
            /** Username */
            username: string;
            /**
             * Share Email
             * @default 8
             */
            share_email: number;
            /**
             * Email Bouncing
             * @default false
             */
            email_bouncing: boolean;
            /** Policy Class */
            policy_class: number;
            /**
             * Joined Date
             * Format: date-time
             */
            joined_date: string;
            /** Joined Ip Num */
            joined_ip_num?: string | null;
            /** Joined Remote Host */
            joined_remote_host: string;
            /**
             * Flag Internal
             * @default false
             */
            flag_internal: boolean;
            /**
             * Flag Edit Users
             * @default false
             */
            flag_edit_users: boolean;
            /**
             * Flag Edit System
             * @default false
             */
            flag_edit_system: boolean;
            /**
             * Flag Email Verified
             * @default false
             */
            flag_email_verified: boolean;
            /**
             * Flag Approved
             * @default true
             */
            flag_approved: boolean;
            /**
             * Flag Deleted
             * @default false
             */
            flag_deleted: boolean;
            /**
             * Flag Banned
             * @default false
             */
            flag_banned: boolean;
            /** Flag Wants Email */
            flag_wants_email?: boolean | null;
            /** Flag Html Email */
            flag_html_email?: boolean | null;
            /** Tracking Cookie */
            tracking_cookie?: string | null;
            /** Flag Allow Tex Produced */
            flag_allow_tex_produced?: boolean | null;
            /** Flag Can Lock */
            flag_can_lock?: boolean | null;
            /** Country */
            country?: string | null;
            /** Affiliation */
            affiliation?: string | null;
            /** Url */
            url?: string | null;
            /** Type */
            type?: number | null;
            /** Archive */
            archive?: string | null;
            /** Subject Class */
            subject_class?: string | null;
            /** Original Subject Classes */
            original_subject_classes: string;
            /** Flag Group Physics */
            flag_group_physics?: number | null;
            /** Flag Group Math */
            flag_group_math: number | null;
            /** Flag Group Cs */
            flag_group_cs?: number | null;
            /** Flag Group Nlin */
            flag_group_nlin: number | null;
            /** Flag Proxy */
            flag_proxy?: number | null;
            /** Flag Journal */
            flag_journal?: number | null;
            /** Flag Xml */
            flag_xml?: number | null;
            /** Dirty */
            dirty?: number | null;
            /** Flag Group Test */
            flag_group_test?: number | null;
            /** Flag Suspect */
            flag_suspect?: number | null;
            /** Flag Group Q Bio */
            flag_group_q_bio?: number | null;
            /** Flag Group Q Fin */
            flag_group_q_fin?: number | null;
            /** Flag Group Stat */
            flag_group_stat?: number | null;
            /** Flag Group Eess */
            flag_group_eess?: number | null;
            /** Flag Group Econ */
            flag_group_econ?: number | null;
            veto_status?: components["schemas"]["VetoStatusEnum"] | null;
            /** Flag Is Mod */
            flag_is_mod?: boolean | null;
            /** Moderated Categories */
            moderated_categories?: string[] | null;
            /** Moderated Archives */
            moderated_archives?: string[] | null;
            /** Tapir Policy Classes */
            tapir_policy_classes?: number[] | null;
            /** Orcid Id */
            orcid_id?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VetoStatusEnum
         * @enum {string}
         */
        VetoStatusEnum: "ok" | "no-endorse" | "no-upload" | "no-replace";
        /** WellKnownServices */
        WellKnownServices: {
            /** Arxiv Base Url */
            arxiv_base_url: string;
            /** Account */
            account: string;
            /** Login */
            login: string;
            /** Logout */
            logout: string;
            /** Account Registration */
            account_registration: string;
            /** Change Password */
            change_password: string;
            /** Password Recovery */
            password_recovery: string;
            /** Oidc Url */
            oidc_url: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login_login_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    oauth2_callback_callback_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    impersonate_impersonate__user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_token_refresh_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_tokens_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tokens"];
            };
        };
        responses: {
            /** @description Tokens successfully refreshed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshedTokens"];
                };
            };
            /** @description Redirect to login if refresh token is missing */
            303: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshedTokens"];
                };
            };
            /** @description Unauthorized if session or refresh token is invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_logout_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    logout_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    logout_callback_logout_callback_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_token_names_token_names_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_well_known_services_well_known_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WellKnownServices"];
                };
            };
        };
    };
    check_db_check_db_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_current_user_info_account_current_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountInfoModel"];
                };
            };
        };
    };
    get_user_profile_account__user_id__profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountInfoModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_account_profile_account__user_id__profile_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountInfoModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountInfoModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_name_account__user_id__name_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountUserNameUpdateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountInfoModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preflight_register_account_account_register_preflight_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountRegistrationModel"];
            };
        };
        responses: {
            /** @description Successfully created account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountRegistrationError"][];
                };
            };
            /** @description Invalid registration data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountRegistrationError"][];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountRegistrationError"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_register_account_register_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CaptchaTokenReplyModel"];
                };
            };
        };
    };
    register_account_account_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountRegistrationModel"];
            };
        };
        responses: {
            /** @description Successfully created account */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountInfoModel"];
                };
            };
            /** @description Invalid registration data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountRegistrationError"][];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountRegistrationError"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    request_email_verify_account__user_id__email_verify_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_email_verified_status_current_user_account_email_verified_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailVerifiedStatus"];
                };
            };
        };
    };
    get_email_verified_status_account__user_id__email_verified_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailVerifiedStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_email_verified_status_account__user_id__email_verified_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailVerifiedStatus"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailVerifiedStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    change_email_account__user_id__email_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailUpdateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"];
                };
            };
            /** @description Old and new email are the same. Or bad new email address */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Forbidden - not allowed to change this email */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Old email does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description The email already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Too many email change request */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Error while updating Keycloak */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_email_history_account__user_id__email_history_get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
            };
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailChangeEntry"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    change_user_password_account__user_id__password_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordUpdateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_user_password_account_password_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_profile_with_query_account_identifier_get: {
        parameters: {
            query?: {
                /** @description User ID */
                user_id?: string | null;
                /** @description Email */
                email?: string | null;
                /** @description Logi name */
                username?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountIdentifierModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upsert_orcid_account_orcid_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrcidUpdateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Forbidden - not allowed to change the ORCID data */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error while updating Keycloak */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    upsert_author_id_account_author_id_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthorIdUpdateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Forbidden - not allowed to change the AUTHOR_ID data */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error while updating Keycloak */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    update_user_authorization_account__user_id__authorization_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserAuthorizationModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"];
                };
            };
            /** @description Request data is not valid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Forbidden - not allowed to change the ORCID data */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error while updating Keycloak */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    validate_password_hash_account_password_validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordValidationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_captcha_image_captcha_image_get: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "image/png": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_captcha_token_captcha_token_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CaptchaTokenReplyModel"];
                };
            };
        };
    };
    get_captcha_audio_captcha_audio_get: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "audio/mpeg": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    audit_event_keycloak_audit_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_kc_user_keycloak_user__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
}

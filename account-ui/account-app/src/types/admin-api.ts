/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/admin_logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Admin Logs */
        get: operations["list_admin_logs_v1_admin_logs__get"];
        put?: never;
        /** Create Admin Log */
        post: operations["create_admin_log_v1_admin_logs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin_logs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Admin Log */
        get: operations["get_admin_log_v1_admin_logs__id__get"];
        /** Update Admin Log */
        put: operations["update_admin_log_v1_admin_logs__id__put"];
        post?: never;
        /** Delete Admin Log */
        delete: operations["delete_admin_log_v1_admin_logs__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Categories */
        get: operations["list_categories_v1_categories__get"];
        put?: never;
        /** Create Category */
        post: operations["create_category_v1_categories__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/categories/{archive}/subject-class": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Subject Classes */
        get: operations["list_subject_classes_v1_categories__archive__subject_class_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/categories/{archive}/subject-class/{subject_class}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Category */
        get: operations["get_category_v1_categories__archive__subject_class__subject_class__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Category */
        get: operations["get_category_v1_categories__id__get"];
        /** Update Category */
        put: operations["update_category_v1_categories__id__put"];
        post?: never;
        /** Delete Category */
        delete: operations["delete_category_v1_categories__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/demographics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Demographics */
        get: operations["list_demographics_v1_demographics__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/demographics/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Demographic
         * @description Display a paper.
         */
        get: operations["get_demographic_v1_demographics__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One User */
        get: operations["get_one_user_v1_users__user_id__get"];
        /**
         * Update User
         * @description Update user - by PUT
         */
        put: operations["update_user_v1_users__user_id__put"];
        post?: never;
        /** Delete User */
        delete: operations["delete_user_v1_users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/username/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User By Username
         * @description List users by username
         */
        get: operations["list_user_by_username_v1_users_username__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/username/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User By Username
         * @description List users by username
         */
        get: operations["get_user_by_username_v1_users_username__username__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description List users
         */
        get: operations["list_users_v1_users__get"];
        put?: never;
        /**
         * Create User
         * @description Creates a new user - by POST
         */
        post: operations["create_user_v1_users__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/document-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Document Summary */
        get: operations["get_user_document_summary_v1_users__user_id__document_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/email_templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Templates */
        get: operations["list_templates_v1_email_templates__get"];
        put?: never;
        /** Create Email Template */
        post: operations["create_email_template_v1_email_templates__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/email_templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Template Data */
        get: operations["template_data_v1_email_templates__id__get"];
        /** Update Template */
        put: operations["update_template_v1_email_templates__id__put"];
        post?: never;
        /** Delete Email Template */
        delete: operations["delete_email_template_v1_email_templates__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/endorsements/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Endorsements */
        get: operations["list_endorsements_v1_endorsements__get"];
        put?: never;
        /**
         * Create Endorsement
         * @description Create a new endorsement by admin
         */
        post: operations["create_endorsement_v1_endorsements__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/endorsements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Endorsement */
        get: operations["get_endorsement_v1_endorsements__id__get"];
        /** Update Endorsement */
        put: operations["update_endorsement_v1_endorsements__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/endorsements/endorse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Endorse
         * @description Create endorsement by a user
         */
        post: operations["endorse_v1_endorsements_endorse_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/endorsement_requests/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Endorsement Requests */
        get: operations["list_endorsement_requests_v1_endorsement_requests__get"];
        put?: never;
        /** Create Endorsement Request */
        post: operations["create_endorsement_request_v1_endorsement_requests__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/endorsement_requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Endorsement Request */
        get: operations["get_endorsement_request_v1_endorsement_requests__id__get"];
        /** Update Endorsement Request */
        put: operations["update_endorsement_request_v1_endorsement_requests__id__put"];
        post?: never;
        /** Delete Endorsement Request */
        delete: operations["delete_endorsement_request_v1_endorsement_requests__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/endorsement_requests/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Endorsement Request By Secret */
        get: operations["get_endorsement_request_by_secret_v1_endorsement_requests_code_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/endorsement_requests_audit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Endorsement Requests Audit */
        get: operations["list_endorsement_requests_audit_v1_endorsement_requests_audit__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/endorsement_requests_audit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Endorsement Requests Audit */
        get: operations["get_endorsement_requests_audit_v1_endorsement_requests_audit__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper_owners/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Ownerships */
        get: operations["list_ownerships_v1_paper_owners__get"];
        put?: never;
        /** Create Ownership */
        post: operations["create_ownership_v1_paper_owners__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper_owners/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Ownerships For User */
        get: operations["list_ownerships_for_user_v1_paper_owners_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper_owners/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ownership */
        get: operations["get_ownership_v1_paper_owners__id__get"];
        /** Update Ownership */
        put: operations["update_ownership_v1_paper_owners__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper_owners/authorize/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register Paper Owner */
        post: operations["register_paper_owner_v1_paper_owners_authorize__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper_owners/update-authorship": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Authorship */
        post: operations["update_authorship_v1_paper_owners_update_authorship_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper_owners/pwc_link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pwc Link */
        get: operations["pwc_link_v1_paper_owners_pwc_link_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper-pw/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Paper Pw */
        get: operations["get_paper_pw_v1_paper_pw__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper-pw/paper/{arxiv_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Paper Pw From Arxiv Id */
        get: operations["get_paper_pw_from_arxiv_id_v1_paper_pw_paper__arxiv_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper-pw/paper/{category}/{subject_class}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Paper Pw From Arxiv Id */
        get: operations["get_paper_pw_from_arxiv_id_v1_paper_pw_paper__category___subject_class__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/paper-pw/renew/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Renew Paper Password
         * @description Give the paper a new password
         */
        put: operations["renew_paper_password_v1_paper_pw_renew__document_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ownership_requests/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Ownership Requests */
        get: operations["list_ownership_requests_v1_ownership_requests__get"];
        put?: never;
        /**
         * Create Ownership Request
         * @description Create ownership request.
         *     $auth->conn->begin();
         *
         *     $sql="INSERT INTO arXiv_ownership_requests (user_id,workflow_status,endorsement_request_id) VALUES ($auth->user_id,'pending',$_endorsement_request_id)";
         *     $auth->conn->query($sql);
         *
         *     $sql="INSERT INTO arXiv_ownership_requests_audit (request_id,remote_addr,remote_host,session_id,tracking_cookie,date) VALUES (LAST_INSERT_ID(),'$_remote_addr','$_remote_host','$_session_id','$_tracking_cookie',{$auth->timestamp})";
         *     $auth->conn->query($sql);
         *
         *     foreach($documents as $document_id) {
         *        $sql="INSERT INTO arXiv_ownership_requests_papers (request_id,document_id) VALUES (LAST_INSERT_ID(),$document_id)";
         *        $auth->conn->query($sql);
         *     }
         *
         *     $request_id=$auth->conn->select_scalar("SELECT LAST_INSERT_ID()");
         *     $auth->conn->commit();
         */
        post: operations["create_ownership_request_v1_ownership_requests__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ownership_requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ownership Request */
        get: operations["get_ownership_request_v1_ownership_requests__id__get"];
        /**
         * Update Ownership Request
         * @description Update ownership request.
         *
         *     $nickname=$auth->get_nickname_of($user_id);
         *     $policy_class=$auth->conn->select_scalar("SELECT name FROM tapir_policy_classes WHERE class_id=$user->policy_class");
         *
         *
         *     if ($_SERVER["REQUEST_METHOD"]=="POST") {
         *        if ($_POST["reject"]) {
         *           $auth->conn->query("UPDATE arXiv_ownership_requests SET workflow_status='rejected' WHERE request_id=$request->request_id");
         *           include "ownership-rejected-screen.php";
         *           exit();
         *        }
         *
         *        if ($_POST["revisit"]) {
         *           $auth->conn->query("UPDATE arXiv_ownership_requests SET workflow_status='pending' WHERE request_id=$request->request_id");
         *           $request->workflow_status="pending";
         *        } else {
         *
         *           $flag_author=$_POST["is_author"] ? 1:0;
         *           $n_papers=$_POST["n_papers"];
         *           $document_ids=array();
         *           $approved_count=0;
         *           for ($i=0;$i<$n_papers;$i++) {
         *              if ($_POST["approve_$i"]) {
         *                 $approved_count++;
         *                 array_push($document_ids,addslashes($_POST["document_id_$i"]));
         *              }
         *           }
         *
         *           if($approved_count==0) {
         *              if($bulk_mode) {
         *                 include "ownership-bulk-none-approved-screen.php";
         *                 exit();
         *              }
         *
         *              $auth->conn->query("UPDATE arXiv_ownership_requests SET workflow_status='accepted' WHERE request_id=$request->request_id");
         *              include "ownership-none-approved-screen.php";
         *              exit();
         *           }
         *
         *           $auth->conn->begin();
         *
         *           $id_list="(".join(",",$document_ids).")";
         *           $already_owns=$auth->conn->select_keys_and_values("SELECT document_id,1 FROM arXiv_paper_owners
         *                                                        WHERE user_id=$user->user_id
         *                                                        AND document_id IN $id_list FOR UPDATE");
         *
         *           if(count($already_owns) == count($document_ids)) {
         *              include "ownership-all-owned-screen.php";
         *              exit();
         *           }
         *
         *           $paper_ids=$auth->conn->select_keys_and_values("SELECT document_id,paper_id FROM arXiv_documents
         *                                                           WHERE document_id IN $id_list");
         *
         *           $paper_list=array();
         *           $owned_list=array();
         *
         *           for($i=0;$i<$n_papers;$i++) {
         *             if ($_POST["approve_$i"]) {
         *                $_document_id=addslashes($_POST["document_id_$i"]);
         *                $paper_id=$paper_ids[$_document_id];
         *                if($already_owns[$_document_id]) {
         *                   array_push($owned_list,$paper_id);
         *                } else {
         *                   $_remote_addr=addslashes($_SERVER["REMOTE_ADDR"]);
         *                   $_remote_host=addslashes($_SERVER["REMOTE_HOST"]);
         *                   $_tracking_cookie=addslashes($_COOKIE["M4_TRACKING_COOKIE_NAME"]);
         *                   array_push($paper_list,$paper_id);
         *                   $auth->conn->query("INSERT INTO arXiv_paper_owners (document_id,user_id,date,added_by,remote_addr,remote_host,tracking_cookie,valid,flag_author,flag_auto) VALUES ($_document_id,$user_id,$auth->timestamp,$auth->user_id,'$_remote_addr','$_remote_host','$_tracking_cookie',1,$flag_author,0)");
         *                   tapir_audit_admin($user_id,"add-paper-owner-2",$_document_id);
         *                }
         *              }
         *           }
         *
         *           if(!$bulk_mode) {
         *              $auth->conn->query("UPDATE arXiv_ownership_requests SET workflow_status='accepted' WHERE request_id=$request->request_id");
         *           }
         *
         *           $auth->conn->commit();
         *           include "ownership-granted-screen.php";
         *           exit();
         *        }
         *     }
         *
         *     {"id":62648,
         *       "user_id":1129053,
         *       "endorsement_request_id":null,
         *       "workflow_status":"accepted",
         *       "date":"2025-03-29T04:00:00Z",
         *       "document_ids":[2123367,2123675,2125897,2130529,2134610,2612674,2618378],
         *       "paper_ids":["2208.04373","2208.04681","2208.06903","2208.11535","2209.00613"]
         *       "selected_documents":[2125897,2123675,2130529]}
         */
        put: operations["update_ownership_request_v1_ownership_requests__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ownership_requests/{request_id}/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Paper Ownership Decision
         * @description Ownership creation
         */
        post: operations["create_paper_ownership_decision_v1_ownership_requests__request_id__documents__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ownership_requests_audit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Ownership Requests Audit */
        get: operations["list_ownership_requests_audit_v1_ownership_requests_audit__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ownership_requests_audit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ownership Requests Audit */
        get: operations["get_ownership_requests_audit_v1_ownership_requests_audit__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/moderators/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Moderators 0 */
        get: operations["list_moderators_0_v1_moderators__get"];
        put?: never;
        /** Create Moderator */
        post: operations["create_moderator_v1_moderators__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/moderators/{archive}/subject-class": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Moderators 1 */
        get: operations["list_moderators_1_v1_moderators__archive__subject_class_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/moderators/{archive}/subject-class/{subject_class}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Moderators 2 */
        get: operations["list_moderators_2_v1_moderators__archive__subject_class__subject_class__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/moderators/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Moderator */
        get: operations["get_moderator_v1_moderators__id__get"];
        /** Update Moderator */
        put: operations["update_moderator_v1_moderators__id__put"];
        post?: never;
        /**
         * Delete Moderator
         * @description parameter ID is user_id "+" archive "+" subject_class where + is a literal character.
         *      This is because react-admin's delete row must have a single ID, and I chose to use + as separator.
         */
        delete: operations["delete_moderator_v1_moderators__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/moderators/user/{user_id}/archive/{archive}/subject_class/{subject_class}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Moderator 2
         * @description Delete moderator operation in a straightforward interface.
         */
        delete: operations["delete_moderator_2_v1_moderators_user__user_id__archive__archive__subject_class__subject_class__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Documents */
        get: operations["list_documents_v1_documents__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/documents/paper_id/{paper_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document
         * @description Display a paper.
         */
        get: operations["get_document_v1_documents_paper_id__paper_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/documents/paper_id/{category}/{paper_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Old Style Document
         * @description Display a paper.
         */
        get: operations["get_old_style_document_v1_documents_paper_id__category___paper_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/documents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document
         * @description Display a paper.
         */
        get: operations["get_document_v1_documents__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/documents/user-action/{id}/{action}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Redirect To User Document Action */
        get: operations["redirect_to_user_document_action_v1_documents_user_action__id___action__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/metadatas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Metadatas */
        get: operations["list_metadatas_v1_metadatas__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/metadatas/paper_id/{paper_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metadata
         * @description Display a paper.
         */
        get: operations["get_metadata_v1_metadatas_paper_id__paper_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/metadatas/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metadata
         * @description Display a paper.
         */
        get: operations["get_metadata_v1_metadatas__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/submissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Submissions */
        get: operations["list_submissions_v1_submissions__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/submissions/paper/{paper_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Submission By Paper Id
         * @description Display a paper.
         */
        get: operations["get_submission_by_paper_id_v1_submissions_paper__paper_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/submissions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Submission
         * @description Display a paper.
         */
        get: operations["get_submission_v1_submissions__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/submissions/document/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Submission By Document Id
         * @description Display a paper.
         */
        get: operations["get_submission_by_document_id_v1_submissions_document__document_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/submissions/metadata/status-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Submission Status */
        get: operations["list_submission_status_v1_submissions_metadata_status_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/membership_institutions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Membership Institutions */
        get: operations["list_membership_institutions_v1_membership_institutions__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/membership_institutions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Membership Institution Data */
        get: operations["membership_institution_data_v1_membership_institutions__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/frontend/{full_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serve React App */
        get: operations["serve_react_app_frontend__full_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/static/{full_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serve React App */
        get: operations["serve_react_app_static__full_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tapir_sessions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Tapir Sessions */
        get: operations["list_tapir_sessions_v1_tapir_sessions__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tapir_sessions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tapir Session
         * @description Display a paper.
         */
        get: operations["get_tapir_session_v1_tapir_sessions__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tapir_sessions/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tapir Session For User
         * @description List tapir sessions for a user
         */
        get: operations["get_tapir_session_for_user_v1_tapir_sessions_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tapir_sessions/{id}/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Close Tapir Session */
        put: operations["close_tapir_session_v1_tapir_sessions__id__close_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/submission_categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submission Categories */
        get: operations["get_submission_categories_v1_submission_categories__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/countries/iso2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Countries In Iso2 */
        get: operations["list_countries_in_iso2_v1_countries_iso2_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/public-users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Public User */
        get: operations["get_one_public_user_v1_public_users__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/public-users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Public User With Query */
        get: operations["get_one_public_user_with_query_v1_public_users__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tapir_admin_audit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Tapir Admin Audit */
        get: operations["list_tapir_admin_audit_v1_tapir_admin_audit__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tapir_admin_audit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tapir Admin Audit */
        get: operations["get_tapir_admin_audit_v1_tapir_admin_audit__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/taxonomy/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Category Groups */
        get: operations["list_category_groups_v1_taxonomy_groups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/taxonomy/groups/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Group */
        get: operations["get_group_v1_taxonomy_groups__group_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/taxonomy/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Categories */
        get: operations["list_categories_v1_taxonomy_categories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/taxonomy/categories/{category_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Category */
        get: operations["get_category_v1_taxonomy_categories__category_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/taxonomy/archives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Archives */
        get: operations["list_archives_v1_taxonomy_archives_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/taxonomy/archives/{archive_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Archive */
        get: operations["get_archive_v1_taxonomy_archives__archive_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Ping */
        get: operations["ping_v1_ping_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AdminLogModel */
        AdminLogModel: {
            /** Id */
            id: number;
            /** Logtime */
            logtime?: string | null;
            /**
             * Created
             * Format: date-time
             */
            created: string;
            /** Paper Id */
            paper_id?: string | null;
            /** Username */
            username?: string | null;
            /** Host */
            host?: string | null;
            /** Program */
            program?: string | null;
            /** Command */
            command?: string | null;
            /** Logtext */
            logtext?: string | null;
            /** Document Id */
            document_id?: number | null;
            /** Submission Id */
            submission_id?: number | null;
            /** Notify */
            notify?: number | null;
        };
        /**
         * Archive
         * @description Represents an arXiv archive--the middle level of the taxonomy.
         */
        Archive: {
            /** Id */
            id: string;
            /** Full Name */
            full_name: string;
            /** Is Active */
            is_active: boolean;
            /** Alt Name */
            alt_name?: string | null;
            /** In Group */
            in_group: string;
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /** End Date */
            end_date?: string | null;
        };
        /**
         * Category
         * @description Represents an arXiv category.
         */
        Category: {
            /** Id */
            id: string;
            /** Full Name */
            full_name: string;
            /** Is Active */
            is_active: boolean;
            /** Alt Name */
            alt_name?: string | null;
            /** In Archive */
            in_archive: string;
            /** Is General */
            is_general: boolean;
            /** Description */
            description?: string | null;
        };
        /** CategoryModel */
        CategoryModel: {
            /** Id */
            id: string;
            /** Archive */
            archive: string;
            /** Subject Class */
            subject_class: string | null;
            /** Definitive */
            definitive: boolean;
            /** Active */
            active: boolean;
            /** Category Name */
            category_name: string | null;
            /** Endorse All */
            endorse_all: string;
            /** Endorse Email */
            endorse_email: string;
            /** Papers To Endorse */
            papers_to_endorse: number;
            /** Endorsement Domain */
            endorsement_domain: string | null;
        };
        /** CountryAlpha2Model */
        CountryAlpha2Model: {
            /** Id */
            id: string;
            /** Country Name */
            country_name: string;
            /** Continent */
            continent: string;
        };
        /** CreateOwnershipRequestModel */
        CreateOwnershipRequestModel: {
            /** User Id */
            user_id?: string | null;
            /** Endorsement Request Id */
            endorsement_request_id?: string | null;
            /** Arxiv Ids */
            arxiv_ids?: string[] | null;
            /** Document Ids */
            document_ids?: string[] | null;
            /** Remote Addr */
            remote_addr?: string | null;
        };
        /** DemographicModel */
        DemographicModel: {
            /** Id */
            id: number;
            /** Country */
            country: string;
            /** Affiliation */
            affiliation: string;
            /** Url */
            url: string;
            /** Type */
            type: number | null;
            /** Archive */
            archive: string | null;
            /** Subject Class */
            subject_class: string | null;
            /** Original Subject Classes */
            original_subject_classes: string;
            /** Flag Group Physics */
            flag_group_physics: number | null;
            /** Flag Group Math */
            flag_group_math: number;
            /** Flag Group Cs */
            flag_group_cs: number;
            /** Flag Group Nlin */
            flag_group_nlin: number;
            /** Flag Proxy */
            flag_proxy: number;
            /** Flag Journal */
            flag_journal: number;
            /** Flag Xml */
            flag_xml: number;
            /** Dirty */
            dirty: number;
            /** Flag Group Test */
            flag_group_test: number;
            /** Flag Suspect */
            flag_suspect: number;
            /** Flag Group Q Bio */
            flag_group_q_bio: number;
            /** Flag Group Q Fin */
            flag_group_q_fin: number;
            /** Flag Group Stat */
            flag_group_stat: number;
            /** Flag Group Eess */
            flag_group_eess: number;
            /** Flag Group Econ */
            flag_group_econ: number;
            veto_status: components["schemas"]["UserVetoStatus"];
            /** Orcid */
            orcid?: string | null;
            /** Author Id */
            author_id?: string | null;
        };
        /** DocumentModel */
        DocumentModel: {
            /** Id */
            id: number;
            /** Paper Id */
            paper_id: string;
            /** Title */
            title: string;
            /** Authors */
            authors?: string | null;
            /** Submitter Email */
            submitter_email: string;
            /** Submitter Id */
            submitter_id?: number | null;
            /**
             * Dated
             * Format: date-time
             */
            dated: string;
            /** Primary Subject Class */
            primary_subject_class?: string | null;
            /** Created */
            created?: string | null;
            /** Last Submission Id */
            last_submission_id?: number | null;
            /** Abs Categories */
            abs_categories?: string | null;
            /** Author Ids */
            author_ids?: number[] | null;
        };
        /**
         * DocumentUserAction
         * @enum {string}
         */
        DocumentUserAction: "replace" | "withdraw" | "cross" | "jref" | "pwc_code";
        /** EmailTemplateModel */
        EmailTemplateModel: {
            /** Id */
            id: number;
            /** Short Name */
            short_name: string;
            /** Long Name */
            long_name: string;
            /** Lang */
            lang: string;
            /** Data */
            data: string;
            /** Sql Statement */
            sql_statement: string;
            /** Created By */
            created_by: number;
            /** Updated By */
            updated_by: number;
            /** Updated Date */
            updated_date?: string | null;
            /** Workflow Status */
            workflow_status: string;
            /** Flag System */
            flag_system: boolean;
            /** Creator First Name */
            creator_first_name: string;
            /** Creator Last Name */
            creator_last_name: string;
            /** Updater First Name */
            updater_first_name: string;
            /** Updater Last Name */
            updater_last_name: string;
        };
        /** EndorsementCodeModel */
        EndorsementCodeModel: {
            /** Preflight */
            preflight: boolean;
            /** Endorser Id */
            endorser_id: string;
            /** Positive */
            positive: boolean;
            /** Endorsement Code */
            endorsement_code: string;
            /** Comment */
            comment: string;
            /** Knows Personally */
            knows_personally: boolean;
            /** Seen Paper */
            seen_paper: boolean;
        };
        /** EndorsementModel */
        EndorsementModel: {
            /** Id */
            id: number;
            /** Endorser Id */
            endorser_id?: number | null;
            /** Endorsee Id */
            endorsee_id: number;
            /** Archive */
            archive: string;
            /** Subject Class */
            subject_class: string;
            /** Flag Valid */
            flag_valid: number;
            type?: components["schemas"]["EndorsementType"] | null;
            /** Point Value */
            point_value: number;
            /**
             * Issued When
             * Format: date-time
             */
            issued_when: string;
            /** Request Id */
            request_id?: number | null;
            arXiv_category?: components["schemas"]["CategoryModel"] | null;
        };
        /** EndorsementOutcomeModel */
        EndorsementOutcomeModel: {
            /** Submitted */
            submitted: boolean;
            /** Accepted */
            accepted: boolean;
            /** Request Acceptable */
            request_acceptable: boolean;
            endorser_capability: components["schemas"]["EndorserCapabilityType"];
            /** Reason */
            reason: string;
            endorsement_request: components["schemas"]["EndorsementRequestModel"];
            endorsee: components["schemas"]["PublicUserModel"] | null;
            endorsement: components["schemas"]["EndorsementModel"] | null;
        };
        /** EndorsementRequestModel */
        EndorsementRequestModel: {
            /** Id */
            id?: number | null;
            /** Endorsee Id */
            endorsee_id?: number | null;
            /** Archive */
            archive?: string | null;
            /** Subject Class */
            subject_class?: string | null;
            /** Secret */
            secret?: string | null;
            /** Flag Valid */
            flag_valid?: boolean | null;
            /** Issued When */
            issued_when?: string | null;
            /**
             * Point Value
             * @default 0
             */
            point_value: number;
            /** Flag Open */
            flag_open?: boolean | null;
            /** Flag Suspect */
            flag_suspect?: boolean | null;
            /** Endorsee Username */
            endorsee_username?: string | null;
        };
        /** EndorsementRequestRequestModel */
        EndorsementRequestRequestModel: {
            /** Endorsee Id */
            endorsee_id: number | null;
            /** Archive */
            archive: string;
            /** Subject Class */
            subject_class: string;
        };
        /** EndorsementRequestsAuditModel */
        EndorsementRequestsAuditModel: {
            /** Id */
            id: number;
            /** Session Id */
            session_id: number | null;
            /** Remote Addr */
            remote_addr: string | null;
            /** Remote Host */
            remote_host: string | null;
            /** Tracking Cookie */
            tracking_cookie: string | null;
        };
        /**
         * EndorsementType
         * @enum {string}
         */
        EndorsementType: "user" | "admin" | "auto";
        /**
         * EndorserCapabilityType
         * @enum {string}
         */
        EndorserCapabilityType: "unknown" | "credited" | "uncredited" | "prohibited" | "oneself";
        /**
         * Group
         * @description Represents an arXiv group--the highest (most general) taxonomy level.
         */
        Group: {
            /** Id */
            id: string;
            /** Full Name */
            full_name: string;
            /** Is Active */
            is_active: boolean;
            /** Alt Name */
            alt_name?: string | null;
            /** Start Year */
            start_year: number;
            /** Default Archive */
            default_archive?: string | null;
            /** Is Test */
            is_test?: boolean | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** MemberInstitutionModel */
        MemberInstitutionModel: {
            /** Id */
            id: number | null;
            /** Resolver Url */
            resolver_URL?: string | null;
            /** Name */
            name: string;
            /** Label */
            label?: string | null;
            /** Alt Text */
            alt_text?: string | null;
            /** Link Icon */
            link_icon?: string | null;
            /** Note */
            note?: string | null;
            /** Email */
            email?: string | null;
            /** Contact Name */
            contact_name?: string | null;
        };
        /** MetadataModel */
        MetadataModel: {
            /** Id */
            id: number;
            /** Document Id */
            document_id: number;
            /** Paper Id */
            paper_id: string;
            /**
             * Created
             * Format: date-time
             */
            created: string;
            /**
             * Updated
             * Format: date-time
             */
            updated: string;
            /** Submitter Id */
            submitter_id: number;
            /** Submitter Name */
            submitter_name: string;
            /** Submitter Email */
            submitter_email: string;
            /** Source Size */
            source_size?: number | null;
            /** Source Format */
            source_format: ("tex" | "ps" | "html" | "pdf" | "withdrawn" | "pdftex" | "docx") | null;
            /** Source Flags */
            source_flags: string | null;
            /** Title */
            title?: string | null;
            /** Authors */
            authors?: string | null;
            /** Abs Categories */
            abs_categories?: string | null;
            /** Comments */
            comments?: string | null;
            /** Proxy */
            proxy?: string | null;
            /** Report Num */
            report_num?: string | null;
            /** Msc Class */
            msc_class?: string | null;
            /** Acm Class */
            acm_class?: string | null;
            /** Journal Ref */
            journal_ref?: string | null;
            /** Doi */
            doi?: string | null;
            /** Abstract */
            abstract?: string | null;
            /** License */
            license?: string | null;
            /** Version */
            version: number;
            /** Modtime */
            modtime?: number | null;
            /** Is Current */
            is_current?: number | null;
            /** Is Withdrawn */
            is_withdrawn: number;
        };
        /** ModeratorModel */
        ModeratorModel: {
            /** Id */
            id: string;
            /** User Id */
            user_id: number;
            /** Archive */
            archive: string;
            /** Subject Class */
            subject_class: string | null;
            /** Is Public */
            is_public: boolean;
            /** No Email */
            no_email: boolean;
            /** No Web Email */
            no_web_email: boolean;
            /** No Reply To */
            no_reply_to: boolean;
            /** Daily Update */
            daily_update: boolean;
        };
        /** OwnershipModel */
        OwnershipModel: {
            /** Id */
            id: string;
            /** Document Id */
            document_id: number;
            /** User Id */
            user_id: number;
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /** Added By */
            added_by: number;
            /** Remote Addr */
            remote_addr: string;
            /** Remote Host */
            remote_host: string;
            /** Tracking Cookie */
            tracking_cookie: string;
            /** Valid */
            valid: boolean;
            /** Flag Author */
            flag_author: boolean;
            /** Flag Auto */
            flag_auto: boolean;
            document?: components["schemas"]["DocumentModel"] | null;
        };
        /** OwnershipRequestModel */
        OwnershipRequestModel: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Endorsement Request Id */
            endorsement_request_id?: number | null;
            workflow_status: components["schemas"]["WorkflowStatus"];
            /** Date */
            date?: string | null;
            /** Document Ids */
            document_ids?: number[] | null;
            /** Paper Ids */
            paper_ids?: string[] | null;
        };
        /** OwnershipRequestsAuditModel */
        OwnershipRequestsAuditModel: {
            /** Id */
            id: number;
            /** Session Id */
            session_id: number;
            /** Remote Addr */
            remote_addr: string;
            /** Remote Host */
            remote_host: string;
            /** Tracking Cookie */
            tracking_cookie: string;
            /**
             * Date
             * Format: date-time
             */
            date: string;
        };
        /** PaperAuthRequest */
        PaperAuthRequest: {
            /** Paper Id */
            paper_id: string;
            /** Password */
            password: string;
            /** User Id */
            user_id: string;
            /** Verify Id */
            verify_id: boolean;
            /** Is Author */
            is_author: boolean;
        };
        /** PaperOwnershipDecisionModel */
        PaperOwnershipDecisionModel: {
            workflow_status: components["schemas"]["WorkflowStatus"];
            /** Rejected Document Ids */
            rejected_document_ids: number[];
            /** Accepted Document Ids */
            accepted_document_ids: number[];
        };
        /** PaperOwnershipUpdateRequest */
        PaperOwnershipUpdateRequest: {
            /** User Id */
            user_id: string;
            /**
             * Authored
             * @default []
             */
            authored: string[];
            /**
             * Not Authored
             * @default []
             */
            not_authored: string[];
            /** Valid */
            valid?: boolean | null;
            /** Auto */
            auto?: boolean | null;
            /** Timestamp */
            timestamp?: string | null;
        };
        /** PaperPwModel */
        PaperPwModel: {
            /** Id */
            id: number;
            /** Password Enc */
            password_enc: string;
        };
        /** PublicUserModel */
        PublicUserModel: {
            /** Id */
            id: number;
            /** Flag Is Mod */
            flag_is_mod: boolean | null;
            /** Email */
            email: string | null;
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Suffix Name */
            suffix_name: string;
            /** Flag Deleted */
            flag_deleted: boolean;
            /** Country */
            country: string | null;
            /** Affiliation */
            affiliation: string | null;
            /** Url */
            url: string | null;
            /** Type */
            type: number | null;
            /** Archive */
            archive: string | null;
            /** Subject Class */
            subject_class: string | null;
            /** Flag Group Physics */
            flag_group_physics: number | null;
            /** Flag Group Math */
            flag_group_math: number | null;
            /** Flag Group Cs */
            flag_group_cs: number | null;
            /** Flag Group Nlin */
            flag_group_nlin: number | null;
            /** Flag Group Test */
            flag_group_test: number | null;
            /** Flag Group Q Bio */
            flag_group_q_bio: number | null;
            /** Flag Group Q Fin */
            flag_group_q_fin: number | null;
            /** Flag Group Stat */
            flag_group_stat: number | null;
            /** Flag Group Eess */
            flag_group_eess: number | null;
            /** Flag Group Econ */
            flag_group_econ: number | null;
        };
        /** SubmissionCategoryModel */
        SubmissionCategoryModel: {
            /** Category */
            category: string;
            /** Is Primary */
            is_primary: boolean;
            /** Is Published */
            is_published: boolean | null;
        };
        /** SubmissionCategoryResultModel */
        SubmissionCategoryResultModel: {
            /** Id */
            id: number;
            /** Categories */
            categories: components["schemas"]["SubmissionCategoryModel"][];
        };
        /** SubmissionModel */
        SubmissionModel: {
            /** Id */
            id: number;
            /** Document Id */
            document_id?: number | null;
            /** Doc Paper Id */
            doc_paper_id?: string | null;
            /** Sword Id */
            sword_id?: number | null;
            /** Userinfo */
            userinfo?: number | null;
            /** Is Author */
            is_author: number;
            /** Agree Policy */
            agree_policy?: number | null;
            /** Viewed */
            viewed?: number | null;
            /** Stage */
            stage?: number | null;
            /** Submitter Id */
            submitter_id?: number | null;
            /** Submitter Name */
            submitter_name?: string | null;
            /** Submitter Email */
            submitter_email?: string | null;
            /** Created */
            created?: string | null;
            /** Updated */
            updated?: string | null;
            /** Status */
            status: number;
            /** Sticky Status */
            sticky_status?: number | null;
            /** Must Process */
            must_process?: number | null;
            /** Submit Time */
            submit_time?: string | null;
            /** Release Time */
            release_time?: string | null;
            /** Source Size */
            source_size?: number | null;
            /** Source Format */
            source_format?: string | null;
            /** Source Flags */
            source_flags?: string | null;
            /** Has Pilot Data */
            has_pilot_data?: number | null;
            /** Is Withdrawn */
            is_withdrawn: number;
            /** Title */
            title?: string | null;
            /** Authors */
            authors?: string | null;
            /** Comments */
            comments?: string | null;
            /** Proxy */
            proxy?: string | null;
            /** Report Num */
            report_num?: string | null;
            /** Msc Class */
            msc_class?: string | null;
            /** Acm Class */
            acm_class?: string | null;
            /** Journal Ref */
            journal_ref?: string | null;
            /** Doi */
            doi?: string | null;
            /** Abstract */
            abstract?: string | null;
            /** License */
            license?: string | null;
            /** Version */
            version: number;
            /** Type */
            type?: string | null;
            /** Is Ok */
            is_ok?: number | null;
            /** Admin Ok */
            admin_ok?: number | null;
            /** Allow Tex Produced */
            allow_tex_produced?: number | null;
            /** Is Oversize */
            is_oversize?: number | null;
            /** Remote Addr */
            remote_addr: string;
            /** Remote Host */
            remote_host: string;
            /** Package */
            package: string;
            /** Rt Ticket Id */
            rt_ticket_id?: number | null;
            /** Auto Hold */
            auto_hold?: number | null;
            /** Is Locked */
            is_locked: number;
            /** Agreement Id */
            agreement_id?: number | null;
            /** Submission Categories */
            submission_categories?: components["schemas"]["SubmissionCategoryModel"][] | null;
        };
        /** SubmissionStatusModel */
        SubmissionStatusModel: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Group */
            group: string;
        };
        /**
         * TapirAdminActionEnum
         * @enum {string}
         */
        TapirAdminActionEnum: "unknown" | "flip-flag" | "become-user" | "suspend-user" | "unsuspend-user" | "make-moderator" | "unmake-moderator" | "change-email" | "add-paper-owner" | "revoke-paper-owner" | "change-paper-pw" | "change-password" | "arXiv-change-status" | "arXiv-make-nonauthor" | "arXiv-make-author" | "add-paper-owner-2" | "arXiv-revoke-paper-owner" | "arXiv-unrevoke-paper-owner" | "arXiv-change-paper-pw" | "endorsed-by-suspect" | "got-negative-endorsement" | "add-comment";
        /** TapirAdminAuditModel */
        TapirAdminAuditModel: {
            /** Id */
            id: number;
            /**
             * Log Date
             * Format: date-time
             */
            log_date: string;
            /** Session Id */
            session_id: number | null;
            /** Ip Addr */
            ip_addr: string;
            /** Remote Host */
            remote_host: string;
            /** Admin User */
            admin_user: number | null;
            /** Affected User */
            affected_user: number;
            /** Tracking Cookie */
            tracking_cookie: string;
            action: components["schemas"]["TapirAdminActionEnum"];
            /** Data */
            data: string;
            /** Comment */
            comment: string;
        };
        /** TapirSessionModel */
        TapirSessionModel: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Last Reissue */
            last_reissue: string | null;
            /** Start Time */
            start_time: string | null;
            /** End Time */
            end_time: string | null;
            /** Close Session */
            close_session: boolean;
        };
        /** UserDocumentSummary */
        UserDocumentSummary: {
            /** Submitted Count */
            submitted_count: number;
            /** Owns Count */
            owns_count: number;
            /** Authored Count */
            authored_count: number;
        };
        /** UserModel */
        UserModel: {
            /** Id */
            id?: number | null;
            /** Email */
            email: string;
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Suffix Name */
            suffix_name: string;
            /**
             * Share First Name
             * @default true
             */
            share_first_name: boolean;
            /**
             * Share Last Name
             * @default true
             */
            share_last_name: boolean;
            /** Username */
            username: string;
            /**
             * Share Email
             * @default 8
             */
            share_email: number;
            /**
             * Email Bouncing
             * @default false
             */
            email_bouncing: boolean;
            /** Policy Class */
            policy_class: number;
            /** Joined Date */
            joined_date: number;
            /** Joined Ip Num */
            joined_ip_num?: string | null;
            /** Joined Remote Host */
            joined_remote_host: string;
            /**
             * Flag Internal
             * @default false
             */
            flag_internal: boolean;
            /**
             * Flag Edit Users
             * @default false
             */
            flag_edit_users: boolean;
            /**
             * Flag Edit System
             * @default false
             */
            flag_edit_system: boolean;
            /**
             * Flag Email Verified
             * @default false
             */
            flag_email_verified: boolean;
            /**
             * Flag Approved
             * @default true
             */
            flag_approved: boolean;
            /**
             * Flag Deleted
             * @default false
             */
            flag_deleted: boolean;
            /**
             * Flag Banned
             * @default false
             */
            flag_banned: boolean;
            /** Flag Wants Email */
            flag_wants_email?: boolean | null;
            /** Flag Html Email */
            flag_html_email?: boolean | null;
            /** Tracking Cookie */
            tracking_cookie?: string | null;
            /** Flag Allow Tex Produced */
            flag_allow_tex_produced?: boolean | null;
            /** Flag Can Lock */
            flag_can_lock?: boolean | null;
            /** Country */
            country?: string | null;
            /** Affiliation */
            affiliation?: string | null;
            /** Url */
            url?: string | null;
            /** Type */
            type?: number | null;
            /** Archive */
            archive?: string | null;
            /** Subject Class */
            subject_class?: string | null;
            /** Original Subject Classes */
            original_subject_classes: string;
            /** Flag Group Physics */
            flag_group_physics?: number | null;
            /** Flag Group Math */
            flag_group_math: number | null;
            /** Flag Group Cs */
            flag_group_cs?: number | null;
            /** Flag Group Nlin */
            flag_group_nlin: number | null;
            /** Flag Proxy */
            flag_proxy?: number | null;
            /** Flag Journal */
            flag_journal?: number | null;
            /** Flag Xml */
            flag_xml?: number | null;
            /** Dirty */
            dirty?: number | null;
            /** Flag Group Test */
            flag_group_test?: number | null;
            /** Flag Suspect */
            flag_suspect?: number | null;
            /** Flag Group Q Bio */
            flag_group_q_bio?: number | null;
            /** Flag Group Q Fin */
            flag_group_q_fin?: number | null;
            /** Flag Group Stat */
            flag_group_stat?: number | null;
            /** Flag Group Eess */
            flag_group_eess?: number | null;
            /** Flag Group Econ */
            flag_group_econ?: number | null;
            veto_status?: components["schemas"]["VetoStatusEnum"] | null;
            /** Flag Is Mod */
            flag_is_mod?: boolean | null;
            /** Tapir Policy Classes */
            tapir_policy_classes?: number[] | null;
            /** Orcid */
            orcid?: string | null;
        };
        /** UserUpdateModel */
        UserUpdateModel: {
            /** Id */
            id?: number | null;
            /** Email */
            email: string;
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Suffix Name */
            suffix_name: string;
            /**
             * Share First Name
             * @default true
             */
            share_first_name: boolean;
            /**
             * Share Last Name
             * @default true
             */
            share_last_name: boolean;
            /** Username */
            username: string;
            /**
             * Share Email
             * @default 8
             */
            share_email: number;
            /**
             * Email Bouncing
             * @default false
             */
            email_bouncing: boolean;
            /** Policy Class */
            policy_class: number;
            /** Joined Date */
            joined_date: number;
            /** Joined Ip Num */
            joined_ip_num?: string | null;
            /** Joined Remote Host */
            joined_remote_host: string;
            /**
             * Flag Internal
             * @default false
             */
            flag_internal: boolean;
            /**
             * Flag Edit Users
             * @default false
             */
            flag_edit_users: boolean;
            /**
             * Flag Edit System
             * @default false
             */
            flag_edit_system: boolean;
            /**
             * Flag Email Verified
             * @default false
             */
            flag_email_verified: boolean;
            /**
             * Flag Approved
             * @default true
             */
            flag_approved: boolean;
            /**
             * Flag Deleted
             * @default false
             */
            flag_deleted: boolean;
            /**
             * Flag Banned
             * @default false
             */
            flag_banned: boolean;
            /** Flag Wants Email */
            flag_wants_email?: boolean | null;
            /** Flag Html Email */
            flag_html_email?: boolean | null;
            /** Tracking Cookie */
            tracking_cookie?: string | null;
            /** Flag Allow Tex Produced */
            flag_allow_tex_produced?: boolean | null;
            /** Flag Can Lock */
            flag_can_lock?: boolean | null;
            /** Country */
            country?: string | null;
            /** Affiliation */
            affiliation?: string | null;
            /** Url */
            url?: string | null;
            /** Type */
            type?: number | null;
            /** Archive */
            archive?: string | null;
            /** Subject Class */
            subject_class?: string | null;
            /** Original Subject Classes */
            original_subject_classes: string;
            /** Flag Group Physics */
            flag_group_physics?: number | null;
            /** Flag Group Math */
            flag_group_math: number | null;
            /** Flag Group Cs */
            flag_group_cs?: number | null;
            /** Flag Group Nlin */
            flag_group_nlin: number | null;
            /** Flag Proxy */
            flag_proxy?: number | null;
            /** Flag Journal */
            flag_journal?: number | null;
            /** Flag Xml */
            flag_xml?: number | null;
            /** Dirty */
            dirty?: number | null;
            /** Flag Group Test */
            flag_group_test?: number | null;
            /** Flag Suspect */
            flag_suspect?: number | null;
            /** Flag Group Q Bio */
            flag_group_q_bio?: number | null;
            /** Flag Group Q Fin */
            flag_group_q_fin?: number | null;
            /** Flag Group Stat */
            flag_group_stat?: number | null;
            /** Flag Group Eess */
            flag_group_eess?: number | null;
            /** Flag Group Econ */
            flag_group_econ?: number | null;
            veto_status?: components["schemas"]["VetoStatusEnum"] | null;
            /** Flag Is Mod */
            flag_is_mod?: boolean | null;
            /** Tapir Policy Classes */
            tapir_policy_classes?: number[] | null;
            /** Orcid */
            orcid?: string | null;
        };
        /**
         * UserVetoStatus
         * @enum {string}
         */
        UserVetoStatus: "ok" | "no-endorse" | "no-upload" | "no-replace";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VetoStatusEnum
         * @enum {string}
         */
        VetoStatusEnum: "ok" | "no-endorse" | "no-upload" | "no-replace";
        /**
         * WorkflowStatus
         * @enum {string}
         */
        WorkflowStatus: "pending" | "accepted" | "rejected";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_admin_logs_v1_admin_logs__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                submission_id?: number | null;
                paper_id?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminLogModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_admin_log_v1_admin_logs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminLogModel"];
                };
            };
        };
    };
    get_admin_log_v1_admin_logs__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminLogModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_admin_log_v1_admin_logs__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminLogModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_admin_log_v1_admin_logs__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_categories_v1_categories__get: {
        parameters: {
            query?: {
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                archive?: string | null;
                subject_class?: string | null;
                /** @description active */
                active?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_category_v1_categories__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryModel"];
                };
            };
        };
    };
    list_subject_classes_v1_categories__archive__subject_class_get: {
        parameters: {
            query?: {
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
            };
            header?: never;
            path: {
                archive: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_category_v1_categories__archive__subject_class__subject_class__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                archive: string;
                subject_class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_category_v1_categories__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_category_v1_categories__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_category_v1_categories__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_demographics_v1_demographics__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of user IDs to filter by */
                id?: number[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DemographicModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_demographic_v1_demographics__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DemographicModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_user_v1_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_v1_users__user_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_v1_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_user_by_username_v1_users_username__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of user IDs to filter by */
                id?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_by_username_v1_users_username__username__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_v1_users__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description None for all, 'admin|owner' */
                user_class?: string | null;
                /** @description moderator */
                flag_is_mod?: boolean | null;
                /** @description non-academic */
                is_non_academic?: boolean | null;
                username?: string | null;
                email?: string | null;
                last_name?: string | null;
                first_name?: string | null;
                flag_edit_users?: boolean | null;
                flag_email_verified?: boolean | null;
                flag_proxy?: boolean | null;
                flag_veto?: boolean | null;
                email_bouncing?: boolean | null;
                clue?: string | null;
                suspect?: boolean | null;
                /** @description Start date for filtering */
                start_joined_date?: string | null;
                /** @description End date for filtering */
                end_joined_date?: string | null;
                /** @description List of user IDs to filter by */
                id?: number[] | null;
                /** @description Query string */
                q?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_v1_users__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"];
                };
            };
        };
    };
    get_user_document_summary_v1_users__user_id__document_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDocumentSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_templates_v1_email_templates__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                short_name?: string | null;
                long_name?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplateModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_email_template_v1_email_templates__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplateModel"];
                };
            };
        };
    };
    template_data_v1_email_templates__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplateModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_template_v1_email_templates__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplateModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_email_template_v1_email_templates__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_endorsements_v1_endorsements__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                /** @description user, auto, admin */
                type?: string[] | string | null;
                flag_valid?: boolean | null;
                endorsee_id?: number | null;
                endorser_id?: number | null;
                /** @description List of user IDs to filter by */
                id?: number[] | null;
                request_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_endorsement_v1_endorsements__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementModel"];
                };
            };
        };
    };
    get_endorsement_v1_endorsements__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_endorsement_v1_endorsements__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    endorse_v1_endorsements_endorse_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EndorsementCodeModel"];
            };
        };
        responses: {
            /** @description Successful endorsement */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementOutcomeModel"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid endorsement code */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endorsement not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementOutcomeModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_endorsement_requests_v1_endorsement_requests__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of endorsement request IDs to filter by */
                id?: number[] | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                flag_valid?: boolean | null;
                /** @description Not positive point value */
                not_positive?: boolean | null;
                /** @description Suspected user */
                suspected?: boolean | null;
                /** @description Endorsement request secret */
                secret_code?: string | null;
                /** @description Endorsement request endorsee first_name */
                endorsee_first_name?: string | null;
                /** @description Endorsement request endorsee last_name */
                endorsee_last_name?: string | null;
                /** @description Endorsement request endorsee email */
                endorsee_email?: string | null;
                /** @description Current ID - index position - for navigation */
                current_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementRequestModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_endorsement_request_v1_endorsement_requests__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EndorsementRequestRequestModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementRequestModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_endorsement_request_v1_endorsement_requests__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementRequestModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_endorsement_request_v1_endorsement_requests__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EndorsementRequestModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementRequestModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_endorsement_request_v1_endorsement_requests__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_endorsement_request_by_secret_v1_endorsement_requests_code_get: {
        parameters: {
            query?: {
                /** @description Find an endorsement request by code */
                secret?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementRequestModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_endorsement_requests_audit_v1_endorsement_requests_audit__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of user IDs to filter by */
                id?: number[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementRequestsAuditModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_endorsement_requests_audit_v1_endorsement_requests_audit__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndorsementRequestsAuditModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_ownerships_v1_paper_owners__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                flag_valid?: boolean | null;
                user_id?: string | null;
                document_id?: number | null;
                /** @description MUI datagrid filter */
                filter?: string | null;
                /** @description List of paper owner */
                id?: string[] | null;
                /** @description with document */
                with_document?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_ownership_v1_paper_owners__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipModel"];
                };
            };
        };
    };
    list_ownerships_for_user_v1_paper_owners_user__user_id__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                flag_valid?: boolean | null;
                document_id?: number | null;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ownership_v1_paper_owners__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_ownership_v1_paper_owners__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_paper_owner_v1_paper_owners_authorize__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaperAuthRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_authorship_v1_paper_owners_update_authorship_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaperOwnershipUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pwc_link_v1_paper_owners_pwc_link_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            307: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_paper_pw_v1_paper_pw__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaperPwModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_paper_pw_from_arxiv_id_v1_paper_pw_paper__arxiv_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                arxiv_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaperPwModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_paper_pw_from_arxiv_id_v1_paper_pw_paper__category___subject_class__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category: string;
                subject_class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaperPwModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renew_paper_password_v1_paper_pw_renew__document_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                document_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaperPwModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_ownership_requests_v1_ownership_requests__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                /** @description List of ownership request IDs to filter by */
                id?: number[] | null;
                /** @description Current ID - index position - for navigation */
                current_id?: number | null;
                user_id?: number | null;
                endorsement_request_id?: number | null;
                workflow_status?: ("pending" | "accepted" | "rejected") | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipRequestModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_ownership_request_v1_ownership_requests__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOwnershipRequestModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipRequestModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ownership_request_v1_ownership_requests__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipRequestModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_ownership_request_v1_ownership_requests__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipRequestModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_paper_ownership_decision_v1_ownership_requests__request_id__documents__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                request_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaperOwnershipDecisionModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipRequestModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_ownership_requests_audit_v1_ownership_requests_audit__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                /** @description List of user IDs to filter by */
                id?: number[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipRequestsAuditModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ownership_requests_audit_v1_ownership_requests_audit__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnershipRequestsAuditModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_moderators_0_v1_moderators__get: {
        parameters: {
            query?: {
                /** @description keys */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                user_id?: number | null;
                archive?: string | null;
                subject_class?: string | null;
                first_name?: string | null;
                last_name?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModeratorModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_moderator_v1_moderators__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModeratorModel"];
                };
            };
        };
    };
    list_moderators_1_v1_moderators__archive__subject_class_get: {
        parameters: {
            query?: {
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
            };
            header?: never;
            path: {
                archive: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModeratorModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_moderators_2_v1_moderators__archive__subject_class__subject_class__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                archive: string;
                subject_class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModeratorModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_moderator_v1_moderators__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModeratorModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_moderator_v1_moderators__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModeratorModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_moderator_v1_moderators__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_moderator_2_v1_moderators_user__user_id__archive__archive__subject_class__subject_class__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
                archive: string;
                subject_class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_documents_v1_documents__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of document IDs to filter by */
                id?: number[] | null;
                /** @description Submitter ID */
                submitter_id?: string | null;
                /** @description MUI datagrid filter */
                filter?: string | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                /** @description arXiv ID */
                paper_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_document_v1_documents_paper_id__paper_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paper_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_old_style_document_v1_documents_paper_id__category___paper_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category: string;
                paper_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_document_v1_documents__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    redirect_to_user_document_action_v1_documents_user_action__id___action__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                action: components["schemas"]["DocumentUserAction"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_metadatas_v1_metadatas__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of metadata IDs to filter by */
                id?: number[] | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                /** @description arXiv ID */
                paper_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_metadata_v1_metadatas_paper_id__paper_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paper_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_metadata_v1_metadatas__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_submissions_v1_submissions__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
                /** @description Stage */
                stage?: number[] | null;
                /** @description Status */
                status?: string[] | string | null;
                /** @description Title */
                title_like?: string | null;
                /** @description Submission status */
                submission_status?: number[] | null;
                /** @description List of user IDs to filter by */
                id?: number[] | null;
                /** @description Document ID */
                document_id?: number | null;
                /** @description Submitter ID */
                submitter_id?: number | null;
                /** @description MUI DataGrid Filter */
                filter?: string | null;
                /** @description Start Submission ID */
                start_submission_id?: number | null;
                /** @description End Submission ID */
                end_submission_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_by_paper_id_v1_submissions_paper__paper_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paper_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_v1_submissions__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_by_document_id_v1_submissions_document__document_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_submission_status_v1_submissions_metadata_status_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionStatusModel"][];
                };
            };
        };
    };
    list_membership_institutions_v1_membership_institutions__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of member institution IDs to filter by */
                id?: string[] | null;
                name?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberInstitutionModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    membership_institution_data_v1_membership_institutions__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberInstitutionModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    serve_react_app_frontend__full_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                full_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    serve_react_app_static__full_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                full_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tapir_sessions_v1_tapir_sessions__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description User id */
                user_id?: number | null;
                /** @description List of user IDs to filter by */
                id?: number[] | null;
                preset?: string | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TapirSessionModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tapir_session_v1_tapir_sessions__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TapirSessionModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tapir_session_for_user_v1_tapir_sessions_user__user_id__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TapirSessionModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    close_tapir_session_v1_tapir_sessions__id__close_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TapirSessionModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_categories_v1_submission_categories__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionCategoryResultModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_countries_in_iso2_v1_countries_iso2_get: {
        parameters: {
            query?: {
                /** @description sort by country_name, continent or id */
                _sort?: string | null;
                /** @description sort order ASC or DESC */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CountryAlpha2Model"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_public_user_v1_public_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUserModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_public_user_with_query_v1_public_users__get: {
        parameters: {
            query?: {
                user_id?: string;
                email?: string;
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUserModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tapir_admin_audit_v1_tapir_admin_audit__get: {
        parameters: {
            query?: {
                /** @description sort by */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of user IDs to filter by */
                id?: number[] | null;
                /** @description Admin User id */
                admin_user?: number | null;
                /** @description affected_user */
                affected_user?: number | null;
                /** @description Start date for filtering */
                start_date?: string | null;
                /** @description End date for filtering */
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TapirAdminAuditModel"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tapir_admin_audit_v1_tapir_admin_audit__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TapirAdminAuditModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_category_groups_v1_taxonomy_groups_get: {
        parameters: {
            query?: {
                /** @description ID */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of IDs to filter by */
                id?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_group_v1_taxonomy_groups__group_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_categories_v1_taxonomy_categories_get: {
        parameters: {
            query?: {
                /** @description keys */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of IDs to filter by */
                id?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_category_v1_taxonomy_categories__category_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_archives_v1_taxonomy_archives_get: {
        parameters: {
            query?: {
                /** @description keys */
                _sort?: string | null;
                /** @description sort order */
                _order?: string | null;
                _start?: number | null;
                _end?: number | null;
                /** @description List of IDs to filter by */
                id?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Archive"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_archive_v1_taxonomy_archives__archive_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                archive_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Archive"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ping_v1_ping_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
